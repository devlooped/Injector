<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Project="corebuild\corebuild.props" />

	<ItemGroup>
		<!-- MSBuild /t:Restore will restore this package like in .NETCore -->
		<PackageReference Include="NuGet.Build.Packaging" Version="*">
			<PrivateAssets>All</PrivateAssets>
		</PackageReference>
		<PackageReference Include="GitInfo" Version="*">
			<PrivateAssets>All</PrivateAssets>
		</PackageReference>
	</ItemGroup>

	<PropertyGroup>
		<Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
		<IsPackagingProject>true</IsPackagingProject>
		<IncludeOutputsInPackage>false</IncludeOutputsInPackage>
		<IncludeFrameworkReferencesInPackage>false</IncludeFrameworkReferencesInPackage>

		<PackageId>Windows.Injector</PackageId>
		<Authors>Cory Plotts</Authors>
		<Description>Allows injecting .NET code into a remote process on Windows</Description>

		<Out Condition="'$(Out)' == ''">out</Out>
		<PackageOutputPath>$(Out)</PackageOutputPath>
		<NuGetRepo Condition="'$(NuGetRepo)' == ''">https://www.myget.org/F/xvs/api/v2/package</NuGetRepo>
		<NuGetUrl Condition="'$(NuGetUrl)' == ''">https://dist.nuget.org/win-x86-commandline/latest/nuget.exe</NuGetUrl>
		<NuGet Condition="'$(NuGet)' == ''">$(RestoreOutputPath)\nuget.exe</NuGet>
	</PropertyGroup>

	<Target Name="Clean">
		<Exec Command="rmdir corebuild\.nuget /S /Q" Condition="Exists('corebuild\.nuget')" />
	</Target>

	<ItemGroup>
		<PackageFile Include="src\Windows.Injector.props" Kind="build" />
		<PackageFile Include="src\Windows.Injector.targets" Kind="build" />
	</ItemGroup>

	<Target Name="Build" DependsOnTargets="GetPackageTargetPath" BeforeTargets="GetPackageContents">
		<MSBuild Projects="src\Injector\Injector.csproj" Properties="Configuration=$(Configuration)">
			<Output TaskParameter="TargetOutputs" ItemName="PackageFile" />
		</MSBuild>
	
		<ItemGroup>
			<SignInclude Include="%2A.dll" />
			<SignInclude Include="%2A.exe" />
			<SignTarget Include="$(PackageTargetPath)" />
		</ItemGroup>

		<MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />

		<WriteLinesToFile Lines="@(SignInclude)" File="$(Out)\sign-include.txt" Overwrite="true" />
		<WriteLinesToFile Lines="@(SignExclude)" File="$(Out)\sign-exclude.txt" Overwrite="true" />
		<WriteLinesToFile Lines="@(SignTarget)" File="$(Out)\sign-target.txt" Overwrite="true" />	
	</Target>

	<Target Name="Push" DependsOnTargets="DownloadNuGet;GetPackageTargetPath">
		<Error Text="No NuGetApiKey property was provided for the nuget push operation." Condition="'$(NuGetApiKey)' == ''" />
		<Exec Command='$(NuGet) Push $(PackageTargetPath) -Source $(NuGetRepo) -ApiKey $(NuGetApiKey)'
			  StandardErrorImportance="high"
			  StandardOutputImportance="normal"
			  ConsoleToMSBuild="true"
			  WorkingDirectory="$(MSBuildThisFileDirectory)" />
	</Target>

	<Target Name="DownloadNuGet" Condition="!Exists('$(NuGet)')">
		<PropertyGroup>
			<PS Condition=" '$(PS)' == '' ">%WINDIR%\System32\WindowsPowerShell\v1.0\powershell.exe</PS>
		</PropertyGroup>
		<Exec Command='"$(PS)" -NoProfile -Command "&amp; { Invoke-WebRequest -Uri $(NuGetUrl) -OutFile &quot;$(NuGet)&quot; }"'
			  EchoOff="true" />
	</Target>

	<Target Name="GitVersion" />
	<Import Project="corebuild\corebuild.targets" />

	<Target Name="GetPackageVersion" DependsOnTargets="GitVersion">
		<PropertyGroup>
			<PackageVersion>$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)$(GitSemVerDashLabel)</PackageVersion>
		</PropertyGroup>
	</Target>
</Project>
